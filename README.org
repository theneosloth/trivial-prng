* Trivial-Prng 

A "seeded" random number generator. No seeded random number generation is actually happening under the hood, this is simply a wrapper for easily rebinding =*random-state*=.

The results *are not consistent between sessions*. This could be fixed by caching the random state hashtable into a file, but I haven't needed this for my personal use cases.

** Usage
#+begin_src lisp
(let ((generator-1 (trivial-prng:random-int-generator :seed 10)))
  (funcall generator-1))
;;=> 5

(let ((generator-1 (trivial-prng:random-int-generator :seed 10)))
  (funcall generator-1))
;; => 5


(trivial-prng:take-n-random-values :seed1 10 100)
;; => (72 22 77 67 51 34 97 1 19 74)

(trivial-prng:take-n-random-values :seed1 10 100)
;; => (72 22 77 67 51 34 97 1 19 74)

(trivial-prng:with-seed :seed2
  (values 
   (random 5)
   (random 5)))
;; => 1,3

(trivial-prng:with-seed :seed2
  (values 
   (random 5)
   (random 5)))
;; => 1,3
#+end_src
** Installation
Clone into a directory where quicklisp can find it and load with quicklisp.
** Author

+ Stefan Kuznetsov

** Copyright

Copyright (c) 2020 Stefan Kuznetsov

** License

Licensed under the LLGPL License.
